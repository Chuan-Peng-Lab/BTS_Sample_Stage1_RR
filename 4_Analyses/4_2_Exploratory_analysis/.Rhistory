install.packages("cmdstan")
install_cmdstan()
install.packages("conda")
install_cmdstan("https://github.com/stan-dev/cmdstan/releases/latest.CmdStan")
install_cmdstan("https://github.com/stan-dev/cmdstan/releases/latest")
install_cmdstan(https://github.com/stan-dev/cmdstan/releases/latest)
check_cmdstan_toolchain()
install_cmdstan(cores = 2)
install_cmdstan(cores = 2)
install_cmdstan(cores = 2)
install_cmdstan(cores = 2)
install_cmdstan(cores = 2)
install_cmdstan(release_url = "https://github.com/stan-dev/cmdstan/releases/download/v2.24.0-rc1/cmdstan-2.24.0-rc1.tar.gz", cores = 4)
cmdstanr::install_cmdstan(version = "2.33.0-rc1", cores = 4)
cmdstanpy.install_cmdstan()
install.packages("cmdstanpy")
install.packages("cmdstan", repos = NULL, type = "source")
cmdstan_version()
model_beta_bayes <- brm(
bf(prop_fem ~ quota,
phi ~ quota),
data = vdem_2015_fake0,
family = Beta(),
chains = 4, iter = 2000, warmup = 1000,
cores = 4, seed = 1234,
# Use the cmdstanr backend for Stan because it's faster and more modern than
# the default rstan You need to install the cmdstanr package first
# (https://mc-stan.org/cmdstanr/) and then run cmdstanr::install_cmdstan() to
# install cmdstan on your computer.
backend = "cmdstanr",
file = "model_beta_bayes"  # Save this so it doesn't have to always rerun
)
library(cmdstan)
library(cmdstanr)
install_cmdstan()
library(cmdstanr)
install_cmdstan()
library(cmdstanr)
install_cmdstan()
install_cmdstan(path = "C:/Users/girt/Documents/.cmdstan/cmdstan-2.32.2.tar.gz")
set_cmdstan_path("C:/Users/girt/Documents/.cmdstan/cmdstan-2.32.2.tar.gz")
set_cmdstan_path("C:/Users/girt/Documents/.cmdstan/cmdstan-2.32.2")
library(cmdstanr)
cmdstan_version()
library(cmdstan)
model_beta_bayes <- brm(
bf(prop_fem ~ quota,
phi ~ quota),
data = vdem_2015_fake0,
family = Beta(),
chains = 4, iter = 2000, warmup = 1000,
cores = 4, seed = 1234,
# Use the cmdstanr backend for Stan because it's faster and more modern than
# the default rstan You need to install the cmdstanr package first
# (https://mc-stan.org/cmdstanr/) and then run cmdstanr::install_cmdstan() to
# install cmdstan on your computer.
backend = "cmdstanr",
file = "model_beta_bayes"  # Save this so it doesn't have to always rerun
)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)        # ggplot, dplyr, %>%, and friends
library(brms)             # Bayesian modeling through Stan
library(tidybayes)        # Manipulate Stan objects in a tidy way
library(broom)            # Convert model objects to data frames
library(broom.mixed)      # Convert brms model objects to data frames
#library(vdemdata)         # Use data from the Varieties of Democracy (V-Dem) project
library(betareg)          # Run beta regression models
library(extraDistr)       # Use extra distributions like dprop()
library(ggdist)           # Special geoms for posterior distributions
library(gghalves)         # Special half geoms
library(ggbeeswarm)       # Special distribution-shaped point jittering
library(ggrepel)          # Automatically position labels
library(patchwork)        # Combine ggplot objects
library(scales)           # Format numbers in nice ways
library(marginaleffects)  # Calculate marginal effects for regression models
library(modelsummary)     # Create side-by-side regression tables
install.packages("https://mc-stan.org/r-packages/", repos = NULL, type = "win.binary")
install.packages("https://mc-stan.org/r-packages/", repos = NULL, type = "win.binary")
# we recommend running this is a fresh R session or restarting your current session
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)        # ggplot, dplyr, %>%, and friends
library(brms)             # Bayesian modeling through Stan
library(tidybayes)        # Manipulate Stan objects in a tidy way
library(broom)            # Convert model objects to data frames
library(broom.mixed)      # Convert brms model objects to data frames
#library(vdemdata)         # Use data from the Varieties of Democracy (V-Dem) project
library(betareg)          # Run beta regression models
library(extraDistr)       # Use extra distributions like dprop()
library(ggdist)           # Special geoms for posterior distributions
library(gghalves)         # Special half geoms
library(ggbeeswarm)       # Special distribution-shaped point jittering
library(ggrepel)          # Automatically position labels
library(patchwork)        # Combine ggplot objects
library(scales)           # Format numbers in nice ways
library(marginaleffects)  # Calculate marginal effects for regression models
library(modelsummary)     # Create side-by-side regression tables
install.packages("https://mc-stan.org/r-packages/", repos = NULL, type = "win.binary")
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
# we recommend running this is a fresh R session or restarting your current session
#install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
library(cmdstanr)
# install.packages("remotes")
remotes::install_github("stan-dev/cmdstanr")
install.packages("devtools")
devtools::install_github("stan-dev/cmdstanr")
knitr::opts_chunk$set(echo = TRUE)
install.packages("cmdstanr", repos = c("https://github.com/stan-dev/", getOption("repos")))
install.packages("cmdstanr", repos = c("https://github.com/stan-dev/", getOption("repos")))
# we recommend running this is a fresh R session or restarting your current session
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
# we recommend running this is a fresh R session or restarting your current session
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
# we recommend running this is a fresh R session or restarting your current session
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
# we recommend running this is a fresh R session or restarting your current session
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
remove.packages("cmdstanr")
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos"), type="binary"))
install.packages("C:/Users/girt/AppData/Local/Temp/RtmpspLeEb/downloaded_packages/cmdstanr_0.6.1.tar.gz", repos = NULL, type = "source")
knitr::opts_chunk$set(echo = TRUE)
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
# we recommend running this is a fresh R session or restarting your current session
#install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
library(cmdstanr)
set_cmdstan_path("C:/Users/girt/anaconda3/Library/bin/cmdstan/")
# we recommend running this is a fresh R session or restarting your current session
#install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
library(cmdstanr)
#set_cmdstan_path("C:/Users/girt/anaconda3/Library/bin/cmdstan/")
check_cmdstan_toolchain()
#check_cmdstan_toolchain()
cmdstan_path()
#check_cmdstan_toolchain()
#cmdstan_path()
cmdstan_version()
# we recommend running this is a fresh R session or restarting your current session
#install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
library(cmdstanr)
set_cmdstan_path("C:/Users/girt/anaconda3/Library/bin/cmdstan/")
# we recommend running this is a fresh R session or restarting your current session
#install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
library(cmdstanr)
set_cmdstan_path("C:/Users/girt/anaconda3/Library/bin/cmdstan/")
#check_cmdstan_toolchain()
#cmdstan_path()
cmdstan_version()
check_cmdstan_toolchain()
cmdstanr::check_cmdstan_toolchain(fix = TRUE)
check_cmdstan_toolchain()
cmdstan_path()
# we recommend running this is a fresh R session or restarting your current session
#install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
library(cmdstanr)
set_cmdstan_path("C:/Users/girt/anaconda3/Library/bin/cmdstan/")
# we recommend running this is a fresh R session or restarting your current session
#install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
library(cmdstanr)
set_cmdstan_path("C:/Users/girt/anaconda3/envs/stan/Library/bin/cmdstan/")
cmdstan_path()
cmdstan_version()
CN_internet <- read_csv("CN_internet.csv")
library(tidyverse)        # ggplot, dplyr, %>%, and friends
library(brms)             # Bayesian modeling through Stan
library(tidybayes)        # Manipulate Stan objects in a tidy way
library(broom)            # Convert model objects to data frames
library(broom.mixed)      # Convert brms model objects to data frames
#library(vdemdata)         # Use data from the Varieties of Democracy (V-Dem) project
library(betareg)          # Run beta regression models
library(extraDistr)       # Use extra distributions like dprop()
library(ggdist)           # Special geoms for posterior distributions
library(gghalves)         # Special half geoms
library(ggbeeswarm)       # Special distribution-shaped point jittering
library(ggrepel)          # Automatically position labels
library(patchwork)        # Combine ggplot objects
library(scales)           # Format numbers in nice ways
library(marginaleffects)  # Calculate marginal effects for regression models
library(modelsummary)     # Create side-by-side regression tables
library(rstan)
CN_internet <- read_csv("CN_internet.csv")
CN_internet
CN_internet %>%
count(Ruggeri_CN == 0) %>%
mutate(prop = n / sum(n))
##   prop_fem == 0   n   prop
## 1         FALSE 169 0.9826
## 2          TRUE   3 0.0174
smodel_beta_zi_int_only <- brm(
bf(Ruggeri_CN ~ Internet_CN_2016,
phi ~ Internet_CN_2016,
zi ~ 1),
data = CN_internet,
family = zero_inflated_beta(),
chains = 4, iter = 2000, warmup = 1000,
cores = 4, seed = 1234,
backend = "cmdstanr",
file = "smodel_beta_zi_int_only"
)
smodel_beta_zi_int_only <- brm(
bf(Ruggeri_CN ~ Internet_CN_2016,
phi ~ Internet_CN_2016,
zi ~ 1),
data = CN_internet,
family = zero_inflated_beta(),
chains = 4, iter = 2000, warmup = 1000,
cores = 4, seed = 1234,
backend = "cmdstanr",
file = "smodel_beta_zi_int_only"
)
model_beta_zi_int_only <- brm(
bf(Ruggeri_CN ~ Internet_CN_2016,
phi ~ Internet_CN_2016,
zi ~ 1),
data = CN_internet,
family = zero_inflated_beta(),
chains = 4, iter = 2000, warmup = 1000,
cores = 4, seed = 1234,
backend = "cmdstanr",
file = "model_beta_zi_int_only"
)
tidy(model_beta_zi_int_only, effects = "fixed")
model_beta_zi_int_only <- brm(
bf(Ruggeri_CN ~ Internet_CN_2016,
phi ~ Internet_CN_2016,
zi ~ 1),
data = CN_internet,
family = zero_inflated_beta(),
chains = 4, iter = 2000, warmup = 1000,
cores = 4, seed = 1234,
backend = "cmdstanr",
file = "model_beta_zi_int_only"
)
Smodel_beta_zi_int_only <- brm(
bf(Ruggeri_CN ~ Internet_CN_2016,
phi ~ Internet_CN_2016,
zi ~ 1),
data = CN_internet,
family = zero_inflated_beta(),
chains = 4, iter = 2000, warmup = 1000,
cores = 4, seed = 1234,
backend = "cmdstanr",
file = "Smodel_beta_zi_int_only"
)
Smodel_beta_zi_int_only <- brm(
bf(Ruggeri_CN ~ Internet_CN_2016,
phi ~ Internet_CN_2016,
zi ~ 1),
data = CN_internet,
family = zero_inflated_beta(),
chains = 4, iter = 2000, warmup = 1000,
cores = 4, seed = 1234,
backend = "cmdstanr",
file = "Smodel_beta_zi_int_only"
)
vdem_2015 %>%
count(prop_fem == 0) %>%
mutate(prop = n / sum(n))
vdem_clean
#library(cmdstanr)
#set_cmdstan_path("C:/Users/girt/anaconda3/Library/bin/cmdstan/")
model_beta_zi_int_only <- brm(
bf(prop_fem ~ quota,
phi ~ quota,
zi ~ 1),
data = vdem_clean,
family = zero_inflated_beta(),
chains = 4, iter = 2000, warmup = 1000,
cores = 4, seed = 1234,
backend = "cmdstanr",
file = "model_beta_zi_int_only"
)
tidy(model_beta_zi_int_only, effects = "fixed")
#library(cmdstanr)
#set_cmdstan_path("C:/Users/girt/anaconda3/Library/bin/cmdstan/")
Qmodel_beta_zi_int_only <- brm(
bf(prop_fem ~ quota,
phi ~ quota,
zi ~ 1),
data = vdem_clean,
family = zero_inflated_beta(),
chains = 4, iter = 2000, warmup = 1000,
cores = 4, seed = 1234,
backend = "cmdstanr",
file = "Qmodel_beta_zi_int_only"
)
path_to_opencl_lib <- "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.3/lib/x64"
cpp_options = list(
paste0("LDFLAGS+= -L\"",path_to_opencl_lib,"\" -lOpenCL")
)
cmdstan_make_local(cpp_options = cpp_options)
rebuild_cmdstan(cores=4)
Smodel_beta_zi_int_only <- brm(
bf(Ruggeri_CN ~ Internet_CN_2016,
phi ~ Internet_CN_2016,
zi ~ 1),
data = CN_internet,
family = zero_inflated_beta(),
chains = 4, iter = 2000, warmup = 1000,
cores = 4, seed = 1234,
backend = "cmdstanr",
file = "Smodel_beta_zi_int_only"
)
cmdstan_path()
cmdstan_version()
# we recommend running this is a fresh R session or restarting your current session
#install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
library(cmdstanr)
set_cmdstan_path("C:/Users/girt/anaconda3/envs/stan/Library/bin/cmdstan/")
Smodel_beta_zi_int_only <- brm(
bf(Ruggeri_CN ~ Internet_CN_2016,
phi ~ Internet_CN_2016,
zi ~ 1),
data = CN_internet,
family = zero_inflated_beta(),
chains = 4, iter = 2000, warmup = 1000,
cores = 4, seed = 1234,
backend = "cmdstanr",
file = "Smodel_beta_zi_int_only"
)
rm(cpp_options)
CN_internet %>%
count(Ruggeri_CN == 0) %>%
mutate(prop = n / sum(n))
##   prop_fem == 0   n   prop
## 1         FALSE 169 0.9826
## 2          TRUE   3 0.0174
Smodel_beta_zi_int_only <- brm(
bf(Ruggeri_CN ~ Internet_CN_2016,
phi ~ Internet_CN_2016,
zi ~ 1),
data = CN_internet,
family = zero_inflated_beta(),
chains = 4, iter = 2000, warmup = 1000,
cores = 4, seed = 1234,
backend = "cmdstanr",
file = "Smodel_beta_zi_int_only"
)
cmdstan_path()
cmdstan_version()
# we recommend running this is a fresh R session or restarting your current session
#install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
library(cmdstanr)
set_cmdstan_path("C:/Users/girt/anaconda3/envs/stan/Library/bin/cmdstan/")
model_beta_bayes <- brm(
bf(prop_fem ~ quota,
phi ~ quota),
data = vdem_2015_fake0,
family = Beta(),
chains = 4, iter = 2000, warmup = 1000,
cores = 4, seed = 1234,
# Use the cmdstanr backend for Stan because it's faster and more modern than
# the default rstan You need to install the cmdstanr package first
# (https://mc-stan.org/cmdstanr/) and then run cmdstanr::install_cmdstan() to
# install cmdstan on your computer.
backend = "cmdstanr",
file = "model_beta_bayes"  # Save this so it doesn't have to always rerun
)
Smodel_beta_bayes <- brm(
bf(prop_fem ~ quota,
phi ~ quota),
data = vdem_2015_fake0,
family = Beta(),
chains = 4, iter = 2000, warmup = 1000,
cores = 4, seed = 1234,
# Use the cmdstanr backend for Stan because it's faster and more modern than
# the default rstan You need to install the cmdstanr package first
# (https://mc-stan.org/cmdstanr/) and then run cmdstanr::install_cmdstan() to
# install cmdstan on your computer.
backend = "cmdstanr",
file = "Smodel_beta_bayes"  # Save this so it doesn't have to always rerun
)
# we recommend running this is a fresh R session or restarting your current session
#install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
library(cmdstanr)
set_cmdstan_path("C:/Users/girt/anaconda3/envs/stan/Library/bin/cmdstan/")
Smodel_beta_bayes <- brm(
bf(prop_fem ~ quota,
phi ~ quota),
data = vdem_2015_fake0,
family = Beta(),
chains = 4, iter = 2000, warmup = 1000,
cores = 4, seed = 1234,
# Use the cmdstanr backend for Stan because it's faster and more modern than
# the default rstan You need to install the cmdstanr package first
# (https://mc-stan.org/cmdstanr/) and then run cmdstanr::install_cmdstan() to
# install cmdstan on your computer.
backend = "cmdstanr",
file = "Smodel_beta_bayes"  # Save this so it doesn't have to always rerun
)
remove.packages("StanHeaders")
remove.packages("rstan")
install.packages("rstan")
knitr::opts_chunk$set(echo = TRUE)
Smodel_beta_bayes <- brm(
bf(prop_fem ~ quota,
phi ~ quota),
data = vdem_2015_fake0,
family = Beta(),
chains = 4, iter = 2000, warmup = 1000,
cores = 4, seed = 1234,
# Use the cmdstanr backend for Stan because it's faster and more modern than
# the default rstan You need to install the cmdstanr package first
# (https://mc-stan.org/cmdstanr/) and then run cmdstanr::install_cmdstan() to
# install cmdstan on your computer.
backend = "cmdstanr",
file = "Smodel_beta_bayes"  # Save this so it doesn't have to always rerun
)
library(tidyverse)        # ggplot, dplyr, %>%, and friends
library(brms)             # Bayesian modeling through Stan
library(tidybayes)        # Manipulate Stan objects in a tidy way
library(broom)            # Convert model objects to data frames
library(broom.mixed)      # Convert brms model objects to data frames
#library(vdemdata)         # Use data from the Varieties of Democracy (V-Dem) project
library(betareg)          # Run beta regression models
library(extraDistr)       # Use extra distributions like dprop()
library(ggdist)           # Special geoms for posterior distributions
library(gghalves)         # Special half geoms
library(ggbeeswarm)       # Special distribution-shaped point jittering
library(ggrepel)          # Automatically position labels
library(patchwork)        # Combine ggplot objects
library(scales)           # Format numbers in nice ways
library(marginaleffects)  # Calculate marginal effects for regression models
library(modelsummary)     # Create side-by-side regression tables
library(rstan)
Smodel_beta_bayes <- brm(
bf(prop_fem ~ quota,
phi ~ quota),
data = vdem_2015_fake0,
family = Beta(),
chains = 4, iter = 2000, warmup = 1000,
cores = 4, seed = 1234,
# Use the cmdstanr backend for Stan because it's faster and more modern than
# the default rstan You need to install the cmdstanr package first
# (https://mc-stan.org/cmdstanr/) and then run cmdstanr::install_cmdstan() to
# install cmdstan on your computer.
backend = "cmdstanr",
file = "Smodel_beta_bayes"  # Save this so it doesn't have to always rerun
)
# we recommend running this is a fresh R session or restarting your current session
#install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
library(cmdstanr)
set_cmdstan_path("C:/Users/girt/anaconda3/envs/stan/Library/bin/cmdstan/")
Smodel_beta_bayes <- brm(
bf(prop_fem ~ quota,
phi ~ quota),
data = vdem_2015_fake0,
family = Beta(),
chains = 4, iter = 2000, warmup = 1000,
cores = 4, seed = 1234,
# Use the cmdstanr backend for Stan because it's faster and more modern than
# the default rstan You need to install the cmdstanr package first
# (https://mc-stan.org/cmdstanr/) and then run cmdstanr::install_cmdstan() to
# install cmdstan on your computer.
backend = "cmdstanr",
file = "Smodel_beta_bayes"  # Save this so it doesn't have to always rerun
)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)        # ggplot, dplyr, %>%, and friends
library(brms)             # Bayesian modeling through Stan
library(tidybayes)        # Manipulate Stan objects in a tidy way
library(broom)            # Convert model objects to data frames
library(broom.mixed)      # Convert brms model objects to data frames
#library(vdemdata)         # Use data from the Varieties of Democracy (V-Dem) project
library(betareg)          # Run beta regression models
library(extraDistr)       # Use extra distributions like dprop()
library(ggdist)           # Special geoms for posterior distributions
library(gghalves)         # Special half geoms
library(ggbeeswarm)       # Special distribution-shaped point jittering
library(ggrepel)          # Automatically position labels
library(patchwork)        # Combine ggplot objects
library(scales)           # Format numbers in nice ways
library(marginaleffects)  # Calculate marginal effects for regression models
library(modelsummary)     # Create side-by-side regression tables
library(rstan)
CN_internet <- read_csv("CN_internet.csv")
CN_internet
CN_internet %>%
count(Ruggeri_CN == 0) %>%
mutate(prop = n / sum(n))
##   prop_fem == 0   n   prop
## 1         FALSE 169 0.9826
## 2          TRUE   3 0.0174
Wmodel_beta_zi_int_only <- brm(
bf(Ruggeri_CN ~ Internet_CN_2016,
phi ~ Internet_CN_2016,
zi ~ 1),
data = CN_internet,
family = zero_inflated_beta(),
chains = 4, iter = 2000, warmup = 1000,
cores = 2, seed = 1234,
backend = "cmdstanr",
file = "Wmodel_beta_zi_int_only"
)
# we recommend running this is a fresh R session or restarting your current session
#install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
library(cmdstanr)
set_cmdstan_path("C:/Users/girt/anaconda3/envs/stan/Library/bin/CmdStan")
Wmodel_beta_zi_int_only <- brm(
bf(Ruggeri_CN ~ Internet_CN_2016,
phi ~ Internet_CN_2016,
zi ~ 1),
data = CN_internet,
family = zero_inflated_beta(),
chains = 4, iter = 2000, warmup = 1000,
cores = 2, seed = 1234,
backend = "cmdstanr",
file = "Wmodel_beta_zi_int_only"
)
